# Project: vol_plugins
# Filename: ldr_analysis.py
# Created on 20.11.17 by francesco
# Last modified on 20.11.17 by francesco

import json
import sys


def ldr_analysis(json_file, unknown = False):
    print()
    print("# VAD <-> PEB - LDR #")
    print("#####################")
    print("Looking for anomalities in LDR modules output")
    print("")
    print("Opening json dump of ldrmodule: {}".format(json_file))
    print("")
    with open(json_file) as file:
        ldrmodules = json.load(file)

    columns = {}
    i = 0
    for column in ldrmodules['columns']:
        columns[column] = i
        i += 1

    for row in ldrmodules['rows']:
        pid = row[columns['Pid']]
        process = row[columns['Process']]
        base = hex(row[columns['Base']])
        inload = row[columns['InLoad']] == 'True'
        ininit = row[columns['InInit']] == 'True'
        inmem = row[columns['InMem']] == 'True'
        mapped = row[columns['MappedPath']]

        # Check if DLL (should be True True True)
        if mapped.split('.')[-1].lower() == 'dll':
            if not (inload and ininit and inmem):
                # Anomaly
                print(
                    "Found possible candidate DLL:\n\tPID: {} - Process: {} - Base: {} - InLoad: {} - InInit: {} - InMem: {} - MappedPath: {}".format(
                        pid, process, base, inload, ininit, inmem, mapped))
        # Check if Exe (True False True / True True True)
        elif mapped.split('.')[-1].lower() == 'exe':
            if not (inload and inmem):
                # Anomaly
                print(
                    "Found possible candidate EXE:\n\tPID: {} - Process: {} - Base: {} - InLoad: {} - InInit: {} - InMem: {} - MappedPath: {}".format(
                        pid, process, base, inload, ininit, inmem, mapped))
        # Else -> Warning
        elif mapped == '':
            # Anomaly
            print(
                "Found possible candidate:\n\tPID: {} - Process: {} - Base: {} - InLoad: {} - InInit: {} - InMem: {} - MappedPath: {}".format(
                    pid, process, base, inload, ininit, inmem, mapped))
        else:
            if unknown:
                # Anomaly
                print(
                    "Unknown Entry:\n\tPID: {} - Process: {} - Base: {} - InLoad: {} - InInit: {} - InMem: {} - MappedPath: {}".format(
                        pid, process, base, inload, ininit, inmem, mapped))


if __name__ == '__main__':
    n_args = len(sys.argv)
    if n_args == 1:
        print("Please specify path of json output of ldrmodules (--output=json)")
    elif n_args == 2:
        json_path = sys.argv[1]
        ldr_analysis(json_path, True)
    else:
        print("Wrong number of parameters specified")
