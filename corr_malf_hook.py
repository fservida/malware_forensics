# Project: vol_plugins
# Filename: corr_malf_hook.py
# Created on 19.11.17 by francesco
# Last modified on 19.11.17 by francesco

import json
import sys


def corr_malf_hook(malf_json_file, apihook_json_file, vadinfo_json_file):
    print()
    print("# Malfinder APIhooks correlation #")
    print("############################")
    print("Looking for correlations btw malfinder and apihook")
    print("")
    print("Opening json dump of malfinder: {}".format(malf_json_file))
    print("Opening json dump of apihook: {}".format(apihook_json_file))
    print("Opening json dump of vadinfo: {}".format(vadinfo_json_file))
    print("")
    with open(malf_json_file) as file:
        malfinder = json.load(file)
    with open(apihook_json_file) as file:
        apihook = json.load(file)
    with open(vadinfo_json_file) as file:
        vadinfo = json.load(file)

    malfinder_columns = {}
    i = 0
    for column in malfinder['columns']:
        malfinder_columns[column] = i
        i += 1

    apihook_columns = {}
    i = 0
    for column in apihook['columns']:
        apihook_columns[column] = i
        i += 1

    vadinfo_columns = {}
    i = 0
    for column in vadinfo['columns']:
        vadinfo_columns[column] = i
        i += 1

    # Create dict for each PID in malfind
    malfinder_pids = {}
    for row in malfinder['rows']:
        pid = row[malfinder_columns['Pid']]
        if pid not in malfinder_pids:
            malfinder_pids[pid] = [row]
        else:
            malfinder_pids[pid].append(row)

    # Create dict for each VAD region in vadinfo (region start address as key)
    vadinfo_dict = {}
    for row in vadinfo['rows']:
        vad_start_address = row[vadinfo_columns['Start']]
        # print("Start Address: {}".format(hex(vad_start_address)))
        if vad_start_address not in vadinfo_dict:
            vadinfo_dict[vad_start_address] = [row]
        else:
            vadinfo_dict[vad_start_address].append(row)

    i = 0
    addresses_checked = []
    processes_with_correlation = {}
    for row in apihook['rows']:
        hook_address = row[apihook_columns['HookAddress']]
        pid = row[apihook_columns['PID']]
        process = row[apihook_columns['Process']]
        module = row[apihook_columns['HookingModule']]

        stop = False

        if pid in malfinder_pids and hook_address not in addresses_checked:
            # print("Found PID in malfind: {}".format(pid))
            addresses_checked.append(hook_address)
            for malfinder_row in malfinder_pids[pid]:

                malfinder_address = malfinder_row[malfinder_columns['Address']]
                # malfinder_page_end = malfinder_address + 2**15

                # print("Malfind Page Start Address: {}".format(hex(malfinder_address)))
                # print("Hook Address: {}\n".format(hex(hook_address)))

                # TODO Filter VADInfo result by PID
                for vad_region in vadinfo_dict[malfinder_address]:
                    vad_end_address = vad_region[vadinfo_columns['End']]
                    if malfinder_address <= hook_address <= vad_end_address:
                        # print(
                        #     "Correlation Found:\n\tPID - {}\n\tProcess - {}\n\tHook Address - {}\n\tMalfind Address - {}\n\tPage End - {}".format(
                        #         pid, process, hook_address, malfinder_address, vad_end_address))
                        stop = True
                        correlation_info = {'hook_address': hex(hook_address),
                                            'malfind_address': hex(malfinder_address),
                                            'page_end': hex(vad_end_address), 'mode': row[apihook_columns['HookMode']],
                                            'type': row[apihook_columns['HookType']],
                                            'HookingModule': row[apihook_columns['HookingModule']],
                                            'VictimModule': row[apihook_columns['VictimModule']],
                                            'Function': row[apihook_columns['Function']]},
                        if pid not in processes_with_correlation:
                            processes_with_correlation[pid] = {'name': process, 'correlations': [correlation_info]}
                        else:
                            processes_with_correlation[pid]['correlations'].append(correlation_info)
                        break
                if stop:
                    # Found a correlation for this hook in a vad region, no need to keep looking
                    break

    print()
    print("# RESULT SUMMARY #")
    print("##################")
    if len(processes_with_correlation) != 0:
        print("Found correlations in the following processes:")
    for pid, process in processes_with_correlation.items():
        print("\tProcess: {}\n\t\tPID: {}\n\t\tCount: {}".format(process['name'], pid, len(process['correlations'])))

    with open('correlations.json', 'w') as file:
        json.dump(processes_with_correlation, file, indent=4)
    print()
    print("# Look at correlations.json for more infos #"
          "")
    print("############################################")


if __name__ == '__main__':
    n_args = len(sys.argv)
    if n_args == 1 or n_args == 2 or n_args == 3:
        print("Please specify path of json output of malfinder, apihooks and vadinfo (in this order) (--output=json)")
    elif n_args == 4:
        malf_json_path = sys.argv[1]
        apihook_json_path = sys.argv[2]
        vadinfo_json_path = sys.argv[3]
        corr_malf_hook(malf_json_path, apihook_json_path, vadinfo_json_path)
    else:
        print("Wrong number of parameters specified")
